{"ast":null,"code":"import React, { useRef, useEffect, useState } from 'react';\nimport ReactDom from 'react-dom';\nimport cx from 'classnames';\nimport { disableBodyScroll, enableBodyScroll } from 'body-scroll-lock';\nimport useForwardedRef from '@bedrock-layout/use-forwarded-ref';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar CloseIcon = function CloseIcon(_ref) {\n  var classes = _ref.classes,\n      classNames = _ref.classNames,\n      styles = _ref.styles,\n      id = _ref.id,\n      closeIcon = _ref.closeIcon,\n      onClick = _ref.onClick;\n  return React.createElement(\"button\", {\n    id: id,\n    className: cx(classes.closeButton, classNames == null ? void 0 : classNames.closeButton),\n    style: styles == null ? void 0 : styles.closeButton,\n    onClick: onClick,\n    \"data-testid\": \"close-button\"\n  }, closeIcon ? closeIcon : React.createElement(\"svg\", {\n    className: classNames == null ? void 0 : classNames.closeIcon,\n    style: styles == null ? void 0 : styles.closeIcon,\n    width: 28,\n    height: 28,\n    viewBox: \"0 0 36 36\",\n    \"data-testid\": \"close-icon\"\n  }, React.createElement(\"path\", {\n    d: \"M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z\"\n  })));\n};\n\nvar isBrowser = typeof window !== 'undefined'; // https://github.com/alexandrzavalii/focus-trap-js/blob/master/src/index.js v1.1.0\n\nvar candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable=\"false\"])'];\n\nfunction isHidden(node) {\n  // offsetParent being null will allow detecting cases where an element is invisible or inside an invisible element,\n  // as long as the element does not use position: fixed. For them, their visibility has to be checked directly as well.\n  return node.offsetParent === null || getComputedStyle(node).visibility === 'hidden';\n}\n\nfunction getCheckedRadio(nodes, form) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n}\n\nfunction isNotRadioOrTabbableRadio(node) {\n  if (node.tagName !== 'INPUT' || node.type !== 'radio' || !node.name) {\n    return true;\n  }\n\n  var radioScope = node.form || node.ownerDocument;\n  var radioSet = radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + node.name + '\"]');\n  var checked = getCheckedRadio(radioSet, node.form);\n  return checked === node || checked === undefined && radioSet[0] === node;\n}\n\nfunction getAllTabbingElements(parentElem) {\n  var currentActiveElement = document.activeElement;\n  var tabbableNodes = parentElem.querySelectorAll(candidateSelectors.join(','));\n  var onlyTabbable = [];\n\n  for (var i = 0; i < tabbableNodes.length; i++) {\n    var node = tabbableNodes[i];\n\n    if (currentActiveElement === node || !node.disabled && getTabindex(node) > -1 && !isHidden(node) && isNotRadioOrTabbableRadio(node)) {\n      onlyTabbable.push(node);\n    }\n  }\n\n  return onlyTabbable;\n}\n\nfunction tabTrappingKey(event, parentElem) {\n  // check if current event keyCode is tab\n  if (!event || event.key !== 'Tab') return;\n\n  if (!parentElem || !parentElem.contains) {\n    if (process && process.env.NODE_ENV === 'development') {\n      console.warn('focus-trap-js: parent element is not defined');\n    }\n\n    return false;\n  }\n\n  if (!parentElem.contains(event.target)) {\n    return false;\n  }\n\n  var allTabbingElements = getAllTabbingElements(parentElem);\n  var firstFocusableElement = allTabbingElements[0];\n  var lastFocusableElement = allTabbingElements[allTabbingElements.length - 1];\n\n  if (event.shiftKey && event.target === firstFocusableElement) {\n    lastFocusableElement.focus();\n    event.preventDefault();\n    return true;\n  } else if (!event.shiftKey && event.target === lastFocusableElement) {\n    firstFocusableElement.focus();\n    event.preventDefault();\n    return true;\n  }\n\n  return false;\n}\n\nfunction getTabindex(node) {\n  var tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);\n  if (!isNaN(tabindexAttr)) return tabindexAttr; // Browsers do not return tabIndex correctly for contentEditable nodes;\n  // so if they don't have a tabindex attribute specifically set, assume it's 0.\n\n  if (isContentEditable(node)) return 0;\n  return node.tabIndex;\n}\n\nfunction isContentEditable(node) {\n  return node.getAttribute('contentEditable');\n}\n\nvar FocusTrap = function FocusTrap(_ref) {\n  var container = _ref.container,\n      initialFocusRef = _ref.initialFocusRef;\n  var refLastFocus = useRef();\n  /**\r\n   * Handle focus lock on the modal\r\n   */\n\n  useEffect(function () {\n    var handleKeyEvent = function handleKeyEvent(event) {\n      if (container == null ? void 0 : container.current) {\n        tabTrappingKey(event, container.current);\n      }\n    };\n\n    if (isBrowser) {\n      document.addEventListener('keydown', handleKeyEvent);\n    } // On mount we focus on the first focusable element in the modal if there is one\n\n\n    if (isBrowser && (container == null ? void 0 : container.current)) {\n      var savePreviousFocus = function savePreviousFocus() {\n        // First we save the last focused element\n        // only if it's a focusable element\n        if (candidateSelectors.findIndex(function (selector) {\n          var _document$activeEleme;\n\n          return (_document$activeEleme = document.activeElement) == null ? void 0 : _document$activeEleme.matches(selector);\n        }) !== -1) {\n          refLastFocus.current = document.activeElement;\n        }\n      };\n\n      if (initialFocusRef) {\n        savePreviousFocus(); // We need to schedule focusing on a next frame - this allows to focus on the modal root\n\n        requestAnimationFrame(function () {\n          var _initialFocusRef$curr;\n\n          (_initialFocusRef$curr = initialFocusRef.current) == null ? void 0 : _initialFocusRef$curr.focus();\n        });\n      } else {\n        var allTabbingElements = getAllTabbingElements(container.current);\n\n        if (allTabbingElements[0]) {\n          savePreviousFocus();\n          allTabbingElements[0].focus();\n        }\n      }\n    }\n\n    return function () {\n      if (isBrowser) {\n        var _refLastFocus$current;\n\n        document.removeEventListener('keydown', handleKeyEvent); // On unmount we restore the focus to the last focused element\n\n        (_refLastFocus$current = refLastFocus.current) == null ? void 0 : _refLastFocus$current.focus();\n      }\n    };\n  }, [container, initialFocusRef]);\n  return null;\n};\n\nvar modals = [];\n/**\r\n * Handle the order of the modals.\r\n * Inspired by the material-ui implementation.\r\n */\n\nvar modalManager = {\n  /**\r\n   * Register a new modal\r\n   */\n  add: function add(newModal) {\n    modals.push(newModal);\n  },\n\n  /**\r\n   * Remove a modal\r\n   */\n  remove: function remove(oldModal) {\n    modals = modals.filter(function (modal) {\n      return modal !== oldModal;\n    });\n  },\n\n  /**\r\n   * When multiple modals are rendered will return true if current modal is the last one\r\n   */\n  isTopModal: function isTopModal(modal) {\n    return !!modals.length && modals[modals.length - 1] === modal;\n  }\n};\n\nfunction useModalManager(ref, open) {\n  useEffect(function () {\n    if (open) {\n      modalManager.add(ref);\n    }\n\n    return function () {\n      modalManager.remove(ref);\n    };\n  }, [open, ref]);\n}\n\nvar useScrollLock = function useScrollLock(refModal, open, showPortal, blockScroll, reserveScrollBarGap) {\n  var oldRef = useRef(null);\n  useEffect(function () {\n    if (open && refModal.current && blockScroll) {\n      oldRef.current = refModal.current;\n      disableBodyScroll(refModal.current, {\n        reserveScrollBarGap: reserveScrollBarGap\n      });\n    }\n\n    return function () {\n      if (oldRef.current) {\n        enableBodyScroll(oldRef.current);\n        oldRef.current = null;\n      }\n    };\n  }, [open, showPortal, refModal, blockScroll, reserveScrollBarGap]);\n};\n\nvar classes = {\n  root: 'react-responsive-modal-root',\n  overlay: 'react-responsive-modal-overlay',\n  overlayAnimationIn: 'react-responsive-modal-overlay-in',\n  overlayAnimationOut: 'react-responsive-modal-overlay-out',\n  modalContainer: 'react-responsive-modal-container',\n  modalContainerCenter: 'react-responsive-modal-containerCenter',\n  modal: 'react-responsive-modal-modal',\n  modalAnimationIn: 'react-responsive-modal-modal-in',\n  modalAnimationOut: 'react-responsive-modal-modal-out',\n  closeButton: 'react-responsive-modal-closeButton'\n};\nvar Modal = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _classNames$overlayAn, _classNames$overlayAn2, _classNames$modalAnim, _classNames$modalAnim2;\n\n  var open = _ref.open,\n      center = _ref.center,\n      _ref$blockScroll = _ref.blockScroll,\n      blockScroll = _ref$blockScroll === void 0 ? true : _ref$blockScroll,\n      _ref$closeOnEsc = _ref.closeOnEsc,\n      closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,\n      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,\n      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? true : _ref$closeOnOverlayCl,\n      container = _ref.container,\n      _ref$showCloseIcon = _ref.showCloseIcon,\n      showCloseIcon = _ref$showCloseIcon === void 0 ? true : _ref$showCloseIcon,\n      closeIconId = _ref.closeIconId,\n      closeIcon = _ref.closeIcon,\n      _ref$focusTrapped = _ref.focusTrapped,\n      focusTrapped = _ref$focusTrapped === void 0 ? true : _ref$focusTrapped,\n      _ref$initialFocusRef = _ref.initialFocusRef,\n      initialFocusRef = _ref$initialFocusRef === void 0 ? undefined : _ref$initialFocusRef,\n      _ref$animationDuratio = _ref.animationDuration,\n      animationDuration = _ref$animationDuratio === void 0 ? 300 : _ref$animationDuratio,\n      classNames = _ref.classNames,\n      styles = _ref.styles,\n      _ref$role = _ref.role,\n      role = _ref$role === void 0 ? 'dialog' : _ref$role,\n      ariaDescribedby = _ref.ariaDescribedby,\n      ariaLabelledby = _ref.ariaLabelledby,\n      modalId = _ref.modalId,\n      onClose = _ref.onClose,\n      onEscKeyDown = _ref.onEscKeyDown,\n      onOverlayClick = _ref.onOverlayClick,\n      onAnimationEnd = _ref.onAnimationEnd,\n      children = _ref.children,\n      reserveScrollBarGap = _ref.reserveScrollBarGap;\n  var refDialog = useForwardedRef(ref);\n  var refModal = useRef(null);\n  var refShouldClose = useRef(null);\n  var refContainer = useRef(null); // Lazily create the ref instance\n  // https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\n\n  if (refContainer.current === null && isBrowser) {\n    refContainer.current = document.createElement('div');\n  } // The value should be false for srr, that way when the component is hydrated client side,\n  // it will match the server rendered content\n\n\n  var _useState = useState(false),\n      showPortal = _useState[0],\n      setShowPortal = _useState[1]; // Hook used to manage multiple modals opened at the same time\n\n\n  useModalManager(refModal, open); // Hook used to manage the scroll\n\n  useScrollLock(refModal, open, showPortal, blockScroll, reserveScrollBarGap);\n\n  var handleOpen = function handleOpen() {\n    if (refContainer.current && !container && !document.body.contains(refContainer.current)) {\n      document.body.appendChild(refContainer.current);\n    }\n\n    document.addEventListener('keydown', handleKeydown);\n  };\n\n  var handleClose = function handleClose() {\n    if (refContainer.current && !container && document.body.contains(refContainer.current)) {\n      document.body.removeChild(refContainer.current);\n    }\n\n    document.removeEventListener('keydown', handleKeydown);\n  };\n\n  var handleKeydown = function handleKeydown(event) {\n    // Only the last modal need to be escaped when pressing the esc key\n    if (event.keyCode !== 27 || !modalManager.isTopModal(refModal)) {\n      return;\n    }\n\n    onEscKeyDown == null ? void 0 : onEscKeyDown(event);\n\n    if (closeOnEsc) {\n      onClose();\n    }\n  };\n\n  useEffect(function () {\n    return function () {\n      if (showPortal) {\n        // When the modal is closed or removed directly, cleanup the listeners\n        handleClose();\n      }\n    };\n  }, [showPortal]);\n  useEffect(function () {\n    // If the open prop is changing, we need to open the modal\n    // This is also called on the first render if the open prop is true when the modal is created\n    if (open && !showPortal) {\n      setShowPortal(true);\n      handleOpen();\n    }\n  }, [open]);\n\n  var handleClickOverlay = function handleClickOverlay(event) {\n    if (refShouldClose.current === null) {\n      refShouldClose.current = true;\n    }\n\n    if (!refShouldClose.current) {\n      refShouldClose.current = null;\n      return;\n    }\n\n    onOverlayClick == null ? void 0 : onOverlayClick(event);\n\n    if (closeOnOverlayClick) {\n      onClose();\n    }\n\n    refShouldClose.current = null;\n  };\n\n  var handleModalEvent = function handleModalEvent() {\n    refShouldClose.current = false;\n  };\n\n  var handleAnimationEnd = function handleAnimationEnd() {\n    if (!open) {\n      setShowPortal(false);\n    }\n\n    onAnimationEnd == null ? void 0 : onAnimationEnd();\n  };\n\n  var containerModal = container || refContainer.current;\n  var overlayAnimation = open ? (_classNames$overlayAn = classNames == null ? void 0 : classNames.overlayAnimationIn) != null ? _classNames$overlayAn : classes.overlayAnimationIn : (_classNames$overlayAn2 = classNames == null ? void 0 : classNames.overlayAnimationOut) != null ? _classNames$overlayAn2 : classes.overlayAnimationOut;\n  var modalAnimation = open ? (_classNames$modalAnim = classNames == null ? void 0 : classNames.modalAnimationIn) != null ? _classNames$modalAnim : classes.modalAnimationIn : (_classNames$modalAnim2 = classNames == null ? void 0 : classNames.modalAnimationOut) != null ? _classNames$modalAnim2 : classes.modalAnimationOut;\n  return showPortal && containerModal ? ReactDom.createPortal(React.createElement(\"div\", {\n    className: cx(classes.root, classNames == null ? void 0 : classNames.root),\n    style: styles == null ? void 0 : styles.root,\n    \"data-testid\": \"root\"\n  }, React.createElement(\"div\", {\n    className: cx(classes.overlay, classNames == null ? void 0 : classNames.overlay),\n    \"data-testid\": \"overlay\",\n    \"aria-hidden\": true,\n    style: _extends({\n      animation: overlayAnimation + \" \" + animationDuration + \"ms\"\n    }, styles == null ? void 0 : styles.overlay)\n  }), React.createElement(\"div\", {\n    ref: refModal,\n    className: cx(classes.modalContainer, center && classes.modalContainerCenter, classNames == null ? void 0 : classNames.modalContainer),\n    style: styles == null ? void 0 : styles.modalContainer,\n    \"data-testid\": \"modal-container\",\n    onClick: handleClickOverlay\n  }, React.createElement(\"div\", {\n    ref: refDialog,\n    className: cx(classes.modal, classNames == null ? void 0 : classNames.modal),\n    style: _extends({\n      animation: modalAnimation + \" \" + animationDuration + \"ms\"\n    }, styles == null ? void 0 : styles.modal),\n    onMouseDown: handleModalEvent,\n    onMouseUp: handleModalEvent,\n    onClick: handleModalEvent,\n    onAnimationEnd: handleAnimationEnd,\n    id: modalId,\n    role: role,\n    \"aria-modal\": \"true\",\n    \"aria-labelledby\": ariaLabelledby,\n    \"aria-describedby\": ariaDescribedby,\n    \"data-testid\": \"modal\",\n    tabIndex: -1\n  }, focusTrapped && React.createElement(FocusTrap, {\n    container: refDialog,\n    initialFocusRef: initialFocusRef\n  }), children, showCloseIcon && React.createElement(CloseIcon, {\n    classes: classes,\n    classNames: classNames,\n    styles: styles,\n    closeIcon: closeIcon,\n    onClick: onClose,\n    id: closeIconId\n  })))), containerModal) : null;\n});\nexport default Modal;\nexport { Modal };","map":{"version":3,"sources":["../src/CloseIcon.tsx","../src/utils.ts","../src/lib/focusTrapJs.ts","../src/FocusTrap.tsx","../src/modalManager.ts","../src/useScrollLock.ts","../src/index.tsx"],"names":["CloseIcon","classes","classNames","styles","id","closeIcon","onClick","className","cx","style","closeButton","width","height","viewBox","d","isBrowser","candidateSelectors","node","getComputedStyle","i","nodes","radioScope","radioSet","checked","getCheckedRadio","getAllTabbingElements","parentElem","currentActiveElement","document","tabbableNodes","onlyTabbable","getTabindex","isHidden","isNotRadioOrTabbableRadio","tabTrappingKey","event","process","console","allTabbingElements","firstFocusableElement","lastFocusableElement","tabindexAttr","parseInt","isNaN","isContentEditable","FocusTrap","container","initialFocusRef","refLastFocus","useRef","useEffect","handleKeyEvent","savePreviousFocus","requestAnimationFrame","modals","modalManager","add","remove","modal","isTopModal","useModalManager","ref","open","useScrollLock","oldRef","refModal","disableBodyScroll","reserveScrollBarGap","enableBodyScroll","root","overlay","overlayAnimationIn","overlayAnimationOut","modalContainer","modalContainerCenter","modalAnimationIn","modalAnimationOut","Modal","center","blockScroll","closeOnEsc","closeOnOverlayClick","showCloseIcon","closeIconId","focusTrapped","undefined","animationDuration","role","ariaDescribedby","ariaLabelledby","modalId","onClose","onEscKeyDown","onOverlayClick","onAnimationEnd","children","refDialog","useForwardedRef","refShouldClose","refContainer","showPortal","setShowPortal","useState","handleOpen","handleClose","handleKeydown","handleClickOverlay","handleModalEvent","handleAnimationEnd","containerModal","overlayAnimation","modalAnimation","animation","onMouseDown","onMouseUp","tabIndex"],"mappings":"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","sourcesContent":["import React from 'react';\nimport cx from 'classnames';\n\ninterface CloseIconProps {\n  id?: string;\n  closeIcon?: React.ReactNode;\n  styles?: {\n    closeButton?: React.CSSProperties;\n    closeIcon?: React.CSSProperties;\n  };\n  classNames?: {\n    closeButton?: string;\n    closeIcon?: string;\n  };\n  classes: {\n    closeButton?: string;\n  };\n  onClick: () => void;\n}\n\nconst CloseIcon = ({\n  classes,\n  classNames,\n  styles,\n  id,\n  closeIcon,\n  onClick,\n}: CloseIconProps) => (\n  <button\n    id={id}\n    className={cx(classes.closeButton, classNames?.closeButton)}\n    style={styles?.closeButton}\n    onClick={onClick}\n    data-testid=\"close-button\"\n  >\n    {closeIcon ? (\n      closeIcon\n    ) : (\n      <svg\n        className={classNames?.closeIcon}\n        style={styles?.closeIcon}\n        width={28}\n        height={28}\n        viewBox=\"0 0 36 36\"\n        data-testid=\"close-icon\"\n      >\n        <path d=\"M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z\" />\n      </svg>\n    )}\n  </button>\n);\n\nexport default CloseIcon;\n","export const isBrowser = typeof window !== 'undefined';\n","// https://github.com/alexandrzavalii/focus-trap-js/blob/master/src/index.js v1.1.0\n\nexport const candidateSelectors = [\n  'input',\n  'select',\n  'textarea',\n  'a[href]',\n  'button',\n  '[tabindex]',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]:not([contenteditable=\"false\"])',\n];\n\nfunction isHidden(node: any) {\n  // offsetParent being null will allow detecting cases where an element is invisible or inside an invisible element,\n  // as long as the element does not use position: fixed. For them, their visibility has to be checked directly as well.\n  return (\n    node.offsetParent === null || getComputedStyle(node).visibility === 'hidden'\n  );\n}\n\nfunction getCheckedRadio(nodes: any, form: any) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n}\n\nfunction isNotRadioOrTabbableRadio(node: any) {\n  if (node.tagName !== 'INPUT' || node.type !== 'radio' || !node.name) {\n    return true;\n  }\n  var radioScope = node.form || node.ownerDocument;\n  var radioSet = radioScope.querySelectorAll(\n    'input[type=\"radio\"][name=\"' + node.name + '\"]'\n  );\n  var checked = getCheckedRadio(radioSet, node.form);\n  return checked === node || (checked === undefined && radioSet[0] === node);\n}\n\nexport function getAllTabbingElements(parentElem: any) {\n  var currentActiveElement = document.activeElement;\n  var tabbableNodes = parentElem.querySelectorAll(candidateSelectors.join(','));\n  var onlyTabbable = [];\n  for (var i = 0; i < tabbableNodes.length; i++) {\n    var node = tabbableNodes[i];\n    if (\n      currentActiveElement === node ||\n      (!node.disabled &&\n        getTabindex(node) > -1 &&\n        !isHidden(node) &&\n        isNotRadioOrTabbableRadio(node))\n    ) {\n      onlyTabbable.push(node);\n    }\n  }\n  return onlyTabbable;\n}\n\nexport function tabTrappingKey(event: any, parentElem: any) {\n  // check if current event keyCode is tab\n  if (!event || event.key !== 'Tab') return;\n\n  if (!parentElem || !parentElem.contains) {\n    if (process && process.env.NODE_ENV === 'development') {\n      console.warn('focus-trap-js: parent element is not defined');\n    }\n    return false;\n  }\n\n  if (!parentElem.contains(event.target)) {\n    return false;\n  }\n\n  var allTabbingElements = getAllTabbingElements(parentElem);\n  var firstFocusableElement = allTabbingElements[0];\n  var lastFocusableElement = allTabbingElements[allTabbingElements.length - 1];\n\n  if (event.shiftKey && event.target === firstFocusableElement) {\n    lastFocusableElement.focus();\n    event.preventDefault();\n    return true;\n  } else if (!event.shiftKey && event.target === lastFocusableElement) {\n    firstFocusableElement.focus();\n    event.preventDefault();\n    return true;\n  }\n  return false;\n}\n\nfunction getTabindex(node: any) {\n  var tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);\n\n  if (!isNaN(tabindexAttr)) return tabindexAttr;\n  // Browsers do not return tabIndex correctly for contentEditable nodes;\n  // so if they don't have a tabindex attribute specifically set, assume it's 0.\n\n  if (isContentEditable(node)) return 0;\n  return node.tabIndex;\n}\n\nfunction isContentEditable(node: any) {\n  return node.getAttribute('contentEditable');\n}\n","import { useEffect, useRef } from 'react';\nimport { isBrowser } from './utils';\nimport {\n  tabTrappingKey,\n  candidateSelectors,\n  getAllTabbingElements,\n} from './lib/focusTrapJs';\n\ninterface FocusTrapProps {\n  container?: React.RefObject<HTMLElement> | null;\n  initialFocusRef?: React.RefObject<HTMLElement>;\n}\n\nexport const FocusTrap = ({ container, initialFocusRef }: FocusTrapProps) => {\n  const refLastFocus = useRef<HTMLElement | null>();\n  /**\n   * Handle focus lock on the modal\n   */\n  useEffect(() => {\n    const handleKeyEvent = (event: KeyboardEvent) => {\n      if (container?.current) {\n        tabTrappingKey(event, container.current);\n      }\n    };\n\n    if (isBrowser) {\n      document.addEventListener('keydown', handleKeyEvent);\n    }\n    // On mount we focus on the first focusable element in the modal if there is one\n    if (isBrowser && container?.current) {\n      const savePreviousFocus = () => {\n        // First we save the last focused element\n        // only if it's a focusable element\n        if (\n          candidateSelectors.findIndex((selector) =>\n            document.activeElement?.matches(selector)\n          ) !== -1\n        ) {\n          refLastFocus.current = document.activeElement as HTMLElement;\n        }\n      };\n\n      if (initialFocusRef) {\n        savePreviousFocus();\n        // We need to schedule focusing on a next frame - this allows to focus on the modal root\n        requestAnimationFrame(() => {\n          initialFocusRef.current?.focus();\n        });\n      } else {\n        const allTabbingElements = getAllTabbingElements(container.current);\n        if (allTabbingElements[0]) {\n          savePreviousFocus();\n          allTabbingElements[0].focus();\n        }\n      }\n    }\n    return () => {\n      if (isBrowser) {\n        document.removeEventListener('keydown', handleKeyEvent);\n        // On unmount we restore the focus to the last focused element\n        refLastFocus.current?.focus();\n      }\n    };\n  }, [container, initialFocusRef]);\n\n  return null;\n};\n","import { Ref, useEffect } from 'react';\n\nlet modals: Ref<Element>[] = [];\n\n/**\n * Handle the order of the modals.\n * Inspired by the material-ui implementation.\n */\nexport const modalManager = {\n  /**\n   * Register a new modal\n   */\n  add: (newModal: Ref<Element>) => {\n    modals.push(newModal);\n  },\n\n  /**\n   * Remove a modal\n   */\n  remove: (oldModal: Ref<Element>) => {\n    modals = modals.filter((modal) => modal !== oldModal);\n  },\n\n  /**\n   * When multiple modals are rendered will return true if current modal is the last one\n   */\n  isTopModal: (modal: Ref<Element>) =>\n    !!modals.length && modals[modals.length - 1] === modal,\n};\n\nexport function useModalManager(ref: Ref<Element>, open: boolean) {\n  useEffect(() => {\n    if (open) {\n      modalManager.add(ref);\n    }\n    return () => {\n      modalManager.remove(ref);\n    };\n  }, [open, ref]);\n}\n","import { useEffect, useRef } from 'react';\nimport { disableBodyScroll, enableBodyScroll } from 'body-scroll-lock';\n\nexport const useScrollLock = (\n  refModal: React.RefObject<Element>,\n  open: boolean,\n  showPortal: boolean,\n  blockScroll: boolean,\n  reserveScrollBarGap?: boolean\n) => {\n  const oldRef = useRef<Element | null>(null);\n\n  useEffect(() => {\n    if (open && refModal.current && blockScroll) {\n      oldRef.current = refModal.current;\n      disableBodyScroll(refModal.current, { reserveScrollBarGap });\n    }\n    return () => {\n      if (oldRef.current) {\n        enableBodyScroll(oldRef.current);\n        oldRef.current = null;\n      }\n    };\n  }, [open, showPortal, refModal, blockScroll, reserveScrollBarGap]);\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport ReactDom from 'react-dom';\nimport cx from 'classnames';\nimport CloseIcon from './CloseIcon';\nimport { FocusTrap } from './FocusTrap';\nimport { modalManager, useModalManager } from './modalManager';\nimport { useScrollLock } from './useScrollLock';\nimport { isBrowser } from './utils';\nimport useForwardedRef from '@bedrock-layout/use-forwarded-ref';\n\nconst classes = {\n  root: 'react-responsive-modal-root',\n  overlay: 'react-responsive-modal-overlay',\n  overlayAnimationIn: 'react-responsive-modal-overlay-in',\n  overlayAnimationOut: 'react-responsive-modal-overlay-out',\n  modalContainer: 'react-responsive-modal-container',\n  modalContainerCenter: 'react-responsive-modal-containerCenter',\n  modal: 'react-responsive-modal-modal',\n  modalAnimationIn: 'react-responsive-modal-modal-in',\n  modalAnimationOut: 'react-responsive-modal-modal-out',\n  closeButton: 'react-responsive-modal-closeButton',\n};\n\nexport interface ModalProps {\n  /**\n   * Control if the modal is open or not.\n   */\n  open: boolean;\n  /**\n   * Should the dialog be centered.\n   *\n   * Default to false.\n   */\n  center?: boolean;\n  /**\n   * Is the modal closable when user press esc key.\n   *\n   * Default to true.\n   */\n  closeOnEsc?: boolean;\n  /**\n   * Is the modal closable when user click on overlay.\n   *\n   * Default to true.\n   */\n  closeOnOverlayClick?: boolean;\n  /**\n   * Whether to block scrolling when dialog is open.\n   *\n   * Default to true.\n   */\n  blockScroll?: boolean;\n  /**\n   * Show the close icon.\n   *\n   * Default to true.\n   */\n  showCloseIcon?: boolean;\n  /**\n   * id attribute for the close icon button.\n   */\n  closeIconId?: string;\n  /**\n   * Custom icon to render (svg, img, etc...).\n   */\n  closeIcon?: React.ReactNode;\n  /**\n   * When the modal is open, trap focus within it.\n   *\n   * Default to true.\n   */\n  focusTrapped?: boolean;\n  /**\n   * Element to focus when focus trap is used.\n   *\n   * Default to undefined.\n   */\n  initialFocusRef?: React.RefObject<HTMLElement>;\n  /**\n   * You can specify a container prop which should be of type `Element`.\n   * The portal will be rendered inside that element.\n   * The default behavior will create a div node and render it at the at the end of document.body.\n   */\n  container?: Element | null;\n  /**\n   * An object containing classNames to style the modal.\n   */\n  classNames?: {\n    root?: string;\n    overlay?: string;\n    overlayAnimationIn?: string;\n    overlayAnimationOut?: string;\n    modalContainer?: string;\n    modal?: string;\n    modalAnimationIn?: string;\n    modalAnimationOut?: string;\n    closeButton?: string;\n    closeIcon?: string;\n  };\n  /**\n   * An object containing the styles objects to style the modal.\n   */\n  styles?: {\n    root?: React.CSSProperties;\n    overlay?: React.CSSProperties;\n    modalContainer?: React.CSSProperties;\n    modal?: React.CSSProperties;\n    closeButton?: React.CSSProperties;\n    closeIcon?: React.CSSProperties;\n  };\n  /**\n   * Animation duration in milliseconds.\n   *\n   * Default to 300.\n   */\n  animationDuration?: number;\n  /**\n   * ARIA role for modal\n   *\n   * Default to 'dialog'.\n   */\n  role?: string;\n  /**\n   * ARIA label for modal\n   */\n  ariaLabelledby?: string;\n  /**\n   * ARIA description for modal\n   */\n  ariaDescribedby?: string;\n  /**\n   * Avoid unpleasant flickering effect when body overflow is hidden. For more information see https://www.npmjs.com/package/body-scroll-lock \n   */\n  reserveScrollBarGap?: boolean;\n  /**\n   * id attribute for modal\n   */\n  modalId?: string;\n  /**\n   * Callback fired when the Modal is requested to be closed by a click on the overlay or when user press esc key.\n   */\n  onClose: () => void;\n  /**\n   * Callback fired when the escape key is pressed.\n   */\n  onEscKeyDown?: (event: KeyboardEvent) => void;\n  /**\n   * Callback fired when the overlay is clicked.\n   */\n  onOverlayClick?: (\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>\n  ) => void;\n  /**\n   * Callback fired when the Modal has exited and the animation is finished.\n   */\n  onAnimationEnd?: () => void;\n  children?: React.ReactNode;\n}\n\nexport const Modal = React.forwardRef(\n  (\n    {\n      open,\n      center,\n      blockScroll = true,\n      closeOnEsc = true,\n      closeOnOverlayClick = true,\n      container,\n      showCloseIcon = true,\n      closeIconId,\n      closeIcon,\n      focusTrapped = true,\n      initialFocusRef = undefined,\n      animationDuration = 300,\n      classNames,\n      styles,\n      role = 'dialog',\n      ariaDescribedby,\n      ariaLabelledby,\n      modalId,\n      onClose,\n      onEscKeyDown,\n      onOverlayClick,\n      onAnimationEnd,\n      children,\n      reserveScrollBarGap,\n    }: ModalProps,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) => {\n    const refDialog = useForwardedRef(ref);\n    const refModal = useRef<HTMLDivElement>(null);\n    const refShouldClose = useRef<boolean | null>(null);\n    const refContainer = useRef<HTMLDivElement | null>(null);\n    // Lazily create the ref instance\n    // https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\n    if (refContainer.current === null && isBrowser) {\n      refContainer.current = document.createElement('div');\n    }\n\n    // The value should be false for srr, that way when the component is hydrated client side,\n    // it will match the server rendered content\n    const [showPortal, setShowPortal] = useState(false);\n\n    // Hook used to manage multiple modals opened at the same time\n    useModalManager(refModal, open);\n\n    // Hook used to manage the scroll\n    useScrollLock(refModal, open, showPortal, blockScroll, reserveScrollBarGap);\n\n    const handleOpen = () => {\n      if (\n        refContainer.current &&\n        !container &&\n        !document.body.contains(refContainer.current)\n      ) {\n        document.body.appendChild(refContainer.current);\n      }\n\n      document.addEventListener('keydown', handleKeydown);\n    };\n\n    const handleClose = () => {\n      if (\n        refContainer.current &&\n        !container &&\n        document.body.contains(refContainer.current)\n      ) {\n        document.body.removeChild(refContainer.current);\n      }\n      document.removeEventListener('keydown', handleKeydown);\n    };\n\n    const handleKeydown = (event: KeyboardEvent) => {\n      // Only the last modal need to be escaped when pressing the esc key\n      if (event.keyCode !== 27 || !modalManager.isTopModal(refModal)) {\n        return;\n      }\n\n      onEscKeyDown?.(event);\n\n      if (closeOnEsc) {\n        onClose();\n      }\n    };\n\n    useEffect(() => {\n      return () => {\n        if (showPortal) {\n          // When the modal is closed or removed directly, cleanup the listeners\n          handleClose();\n        }\n      };\n    }, [showPortal]);\n\n    useEffect(() => {\n      // If the open prop is changing, we need to open the modal\n      // This is also called on the first render if the open prop is true when the modal is created\n      if (open && !showPortal) {\n        setShowPortal(true);\n        handleOpen();\n      }\n    }, [open]);\n\n    const handleClickOverlay = (\n      event: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ) => {\n      if (refShouldClose.current === null) {\n        refShouldClose.current = true;\n      }\n\n      if (!refShouldClose.current) {\n        refShouldClose.current = null;\n        return;\n      }\n\n      onOverlayClick?.(event);\n\n      if (closeOnOverlayClick) {\n        onClose();\n      }\n\n      refShouldClose.current = null;\n    };\n\n    const handleModalEvent = () => {\n      refShouldClose.current = false;\n    };\n\n    const handleAnimationEnd = () => {\n      if (!open) {\n        setShowPortal(false);\n      }\n\n      onAnimationEnd?.();\n    };\n\n    const containerModal = container || refContainer.current;\n\n    const overlayAnimation = open\n      ? classNames?.overlayAnimationIn ?? classes.overlayAnimationIn\n      : classNames?.overlayAnimationOut ?? classes.overlayAnimationOut;\n\n    const modalAnimation = open\n      ? classNames?.modalAnimationIn ?? classes.modalAnimationIn\n      : classNames?.modalAnimationOut ?? classes.modalAnimationOut;\n\n    return showPortal && containerModal\n      ? ReactDom.createPortal(\n          <div\n            className={cx(classes.root, classNames?.root)}\n            style={styles?.root}\n            data-testid=\"root\"\n          >\n            <div\n              className={cx(classes.overlay, classNames?.overlay)}\n              data-testid=\"overlay\"\n              aria-hidden={true}\n              style={{\n                animation: `${overlayAnimation} ${animationDuration}ms`,\n                ...styles?.overlay,\n              }}\n            />\n            <div\n              ref={refModal}\n              className={cx(\n                classes.modalContainer,\n                center && classes.modalContainerCenter,\n                classNames?.modalContainer\n              )}\n              style={styles?.modalContainer}\n              data-testid=\"modal-container\"\n              onClick={handleClickOverlay}\n            >\n              <div\n                ref={refDialog}\n                className={cx(classes.modal, classNames?.modal)}\n                style={{\n                  animation: `${modalAnimation} ${animationDuration}ms`,\n                  ...styles?.modal,\n                }}\n                onMouseDown={handleModalEvent}\n                onMouseUp={handleModalEvent}\n                onClick={handleModalEvent}\n                onAnimationEnd={handleAnimationEnd}\n                id={modalId}\n                role={role}\n                aria-modal=\"true\"\n                aria-labelledby={ariaLabelledby}\n                aria-describedby={ariaDescribedby}\n                data-testid=\"modal\"\n                tabIndex={-1}\n              >\n                {focusTrapped && (\n                  <FocusTrap\n                    container={refDialog}\n                    initialFocusRef={initialFocusRef}\n                  />\n                )}\n                {children}\n                {showCloseIcon && (\n                  <CloseIcon\n                    classes={classes}\n                    classNames={classNames}\n                    styles={styles}\n                    closeIcon={closeIcon}\n                    onClick={onClose}\n                    id={closeIconId}\n                  />\n                )}\n              </div>\n            </div>\n          </div>,\n          containerModal\n        )\n      : null;\n  }\n);\n\nexport default Modal;\n"]},"metadata":{},"sourceType":"module"}