{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ewt-all-in-one-1\\\\Desktop\\\\Chat-app\\\\src\\\\pages\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { db, auth, storage } from \"../firebase\";\nimport { collection, query, where, onSnapshot, addDoc, Timestamp, orderBy, setDoc, doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport { ref, getDownloadURL, uploadBytes } from \"firebase/storage\";\nimport User from \"../components/User\";\nimport MessageForm from \"../components/MessageForm\";\nimport Message from \"../components/Message\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [chat, setChat] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(\"\");\n  const [, setMsgs] = useState([]);\n  const user1 = auth.currentUser.uid;\n  useEffect(() => {\n    const usersRef = collection(db, \"users\"); // create query object\n\n    const q = query(usersRef, where(\"uid\", \"not-in\", [user1])); // execute query\n\n    const unsub = onSnapshot(q, querySnapshot => {\n      let users = [];\n      querySnapshot.forEach(doc => {\n        users.push(doc.data());\n      });\n      setUsers(users);\n    });\n    return () => unsub();\n  }, []);\n\n  const selectUser = async user => {\n    console.log(user);\n    setChat(user);\n    const user2 = user.uid;\n    const id = user1 > user2 ? `${user1 + user2}` : `${user2 + user1}`;\n    const msgsRef = collection(db, \"messages\", id, \"chat\");\n    const q = query(msgsRef, orderBy(\"createdAt\", \"asc\"));\n    onSnapshot(q, querySnapshot => {\n      let msgs = [];\n      querySnapshot.forEach(doc => {\n        msgs.push(doc.data());\n      });\n      setMsgs(msgs);\n    }); // get last message b/w logged in user and selected user\n\n    const docSnap = await getDoc(doc(db, \"lastMsg\", id)); // if last message exists and message is from selected user\n\n    if (docSnap.data() && docSnap.data().from !== user1) {\n      // update last message doc, set unread to false\n      await updateDoc(doc(db, \"lastMsg\", id), {\n        unread: false\n      });\n    }\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const user2 = chat.uid;\n    const id = user1 > user2 ? `${user1 + user2}` : `${user2 + user1}`;\n    let url;\n\n    if (img) {\n      const imgRef = ref(storage, `images/${new Date().getTime()} - ${img.name}`);\n      const snap = await uploadBytes(imgRef, img);\n      const dlUrl = await getDownloadURL(ref(storage, snap.ref.fullPath));\n      url = dlUrl;\n    }\n\n    await addDoc(collection(db, \"messages\", id, \"chat\"), {\n      text,\n      from: user1,\n      to: user2,\n      createdAt: Timestamp.fromDate(new Date()),\n      media: url || \"\"\n    });\n    await setDoc(doc(db, \"lastMsg\", id), {\n      text,\n      from: user1,\n      to: user2,\n      createdAt: Timestamp.fromDate(new Date()),\n      media: url || \"\",\n      unread: true\n    });\n    setText(\"\");\n    setImg(\"\");\n  };\n\n  console.log(msgs);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"users_container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-page-border\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: \"switch-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"switch-label\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"switch-handle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Desktop Notification\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), users.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: msgs === [] ? null : /*#__PURE__*/_jsxDEV(User, {\n          user: user,\n          selectUser: selectUser,\n          user1: user1,\n          chat: chat\n        }, user.uid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages_container\",\n      children: chat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-model-size-img\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/static/media/image1.f02b66c0.jpg\",\n            alt: \"img\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-model-size-status\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: chat.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"1 min\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: msgs.length ? msgs.map((msg, i) => /*#__PURE__*/_jsxDEV(Message, {\n            msg: msg,\n            user1: user1,\n            text: text\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 21\n          }, this)) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MessageForm, {\n          handleSubmit: handleSubmit,\n          text: text,\n          setText: setText,\n          setImg: setImg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"no_conv\",\n        children: \"Select a user to start conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"FjFYyjYJKUWgGUvQLX9M8u+ECoY=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/ewt-all-in-one-1/Desktop/Chat-app/src/pages/Home.js"],"names":["React","useEffect","useState","db","auth","storage","collection","query","where","onSnapshot","addDoc","Timestamp","orderBy","setDoc","doc","getDoc","updateDoc","ref","getDownloadURL","uploadBytes","User","MessageForm","Message","Home","users","setUsers","chat","setChat","text","setText","img","setImg","setMsgs","user1","currentUser","uid","usersRef","q","unsub","querySnapshot","forEach","push","data","selectUser","user","console","log","user2","id","msgsRef","msgs","docSnap","from","unread","handleSubmit","e","preventDefault","url","imgRef","Date","getTime","name","snap","dlUrl","fullPath","to","createdAt","fromDate","media","map","length","msg","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { db, auth, storage } from \"../firebase\";\r\nimport {\r\n  collection,\r\n  query,\r\n  where,\r\n  onSnapshot,\r\n  addDoc,\r\n  Timestamp,\r\n  orderBy,\r\n  setDoc,\r\n  doc,\r\n  getDoc,\r\n  updateDoc,\r\n} from \"firebase/firestore\";\r\nimport { ref, getDownloadURL, uploadBytes } from \"firebase/storage\";\r\nimport User from \"../components/User\";\r\nimport MessageForm from \"../components/MessageForm\";\r\nimport Message from \"../components/Message\";\r\n\r\nconst Home = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [chat, setChat] = useState(\"\");\r\n  const [text, setText] = useState(\"\");\r\n  const [img, setImg] = useState(\"\");\r\n  const [, setMsgs] = useState([]);\r\n\r\n  const user1 = auth.currentUser.uid;\r\n\r\n  useEffect(() => {\r\n    const usersRef = collection(db, \"users\");\r\n    // create query object\r\n    const q = query(usersRef, where(\"uid\", \"not-in\", [user1]));\r\n    // execute query\r\n    const unsub = onSnapshot(q, (querySnapshot) => {\r\n      let users = [];\r\n      querySnapshot.forEach((doc) => {\r\n        users.push(doc.data());\r\n      });\r\n      setUsers(users);\r\n    });\r\n    return () => unsub();\r\n  }, []);\r\n\r\n  const selectUser = async (user) => {\r\n    console.log(user);\r\n    setChat(user);\r\n\r\n    const user2 = user.uid;\r\n    const id = user1 > user2 ? `${user1 + user2}` : `${user2 + user1}`;\r\n\r\n    const msgsRef = collection(db, \"messages\", id, \"chat\");\r\n    const q = query(msgsRef, orderBy(\"createdAt\", \"asc\"));\r\n\r\n    onSnapshot(q, (querySnapshot) => {\r\n      let msgs = [];\r\n      querySnapshot.forEach((doc) => {\r\n        msgs.push(doc.data());\r\n      });\r\n      setMsgs(msgs);\r\n    });\r\n\r\n    // get last message b/w logged in user and selected user\r\n    const docSnap = await getDoc(doc(db, \"lastMsg\", id));\r\n    // if last message exists and message is from selected user\r\n    if (docSnap.data() && docSnap.data().from !== user1) {\r\n      // update last message doc, set unread to false\r\n      await updateDoc(doc(db, \"lastMsg\", id), { unread: false });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const user2 = chat.uid;\r\n\r\n    const id = user1 > user2 ? `${user1 + user2}` : `${user2 + user1}`;\r\n\r\n    let url;\r\n    if (img) {\r\n      const imgRef = ref(\r\n        storage,\r\n        `images/${new Date().getTime()} - ${img.name}`\r\n      );\r\n      const snap = await uploadBytes(imgRef, img);\r\n      const dlUrl = await getDownloadURL(ref(storage, snap.ref.fullPath));\r\n      url = dlUrl;\r\n    }\r\n\r\n    await addDoc(collection(db, \"messages\", id, \"chat\"), {\r\n      text,\r\n      from: user1,\r\n      to: user2,\r\n      createdAt: Timestamp.fromDate(new Date()),\r\n      media: url || \"\",\r\n    });\r\n\r\n    await setDoc(doc(db, \"lastMsg\", id), {\r\n      text,\r\n      from: user1,\r\n      to: user2,\r\n      createdAt: Timestamp.fromDate(new Date()),\r\n      media: url || \"\",\r\n      unread: true,\r\n    });\r\n\r\n    setText(\"\");\r\n    setImg(\"\");\r\n  };\r\n\r\n  console.log(msgs);\r\n  return (\r\n    <div className=\"home_container\">\r\n      <div className=\"users_container\">\r\n        <div className=\"chat-page-border\">\r\n          <label className=\"switch\">\r\n            <input type=\"checkbox\" className=\"switch-input\" />\r\n            <span className=\"switch-label\"></span>\r\n            <span className=\"switch-handle\"></span>\r\n          </label>\r\n          <p>Desktop Notification</p>\r\n        </div>\r\n        {users.map((user) => (\r\n          <div>\r\n            {msgs === [] ? null : (\r\n              <User\r\n                key={user.uid}\r\n                user={user}\r\n                selectUser={selectUser}\r\n                user1={user1}\r\n                chat={chat}\r\n              />\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"messages_container\">\r\n        {chat ? (\r\n          <>\r\n            {/*   <div className=\"messages_user\">\r\n              <h3>{chat.name}</h3>\r\n              <img\r\n                src=\"/static/media/image1.f02b66c0.jpg\"\r\n                alt=\"avatar\"\r\n                className=\"chat-page-user-inf_img\"\r\n              ></img>\r\n        </div>*/}\r\n            <div className=\"chat-model-size-img\">\r\n              <img src=\"/static/media/image1.f02b66c0.jpg\" alt=\"img\" />\r\n\r\n              {\r\n                <div className=\"chat-model-size-status\">\r\n                  <p>{chat.name}</p>\r\n                  <span>1 min</span>\r\n                </div>\r\n              }\r\n            </div>\r\n            <div className=\"messages\">\r\n              {msgs.length\r\n                ? msgs.map((msg, i) => (\r\n                    <Message key={i} msg={msg} user1={user1} text={text} />\r\n                  ))\r\n                : null}\r\n            </div>\r\n            <MessageForm\r\n              handleSubmit={handleSubmit}\r\n              text={text}\r\n              setText={setText}\r\n              setImg={setImg}\r\n            />\r\n          </>\r\n        ) : (\r\n          <h3 className=\"no_conv\">Select a user to start conversation</h3>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}