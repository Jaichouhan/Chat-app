{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ewt-all-in-one-1\\\\Desktop\\\\Chat-app\\\\src\\\\pages\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { db, auth, storage } from \"../firebase\";\nimport { collection, query, where, onSnapshot, addDoc, Timestamp, orderBy, setDoc, doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport { ref, getDownloadURL, uploadBytes } from \"firebase/storage\";\nimport User from \"../components/User\";\nimport MessageForm from \"../components/MessageForm\";\nimport Message from \"../components/Message\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [chat, setChat] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(\"\");\n  const [msgs, setMsgs] = useState([]);\n  const user1 = auth.currentUser.uid;\n  const clientId = JSON.parse(localStorage.getItem(\"id\"));\n  const user2 = clientId.id;\n  const id = user1 > user2 ? `${user1 + user2}` : `${user2 + user1}`;\n  const msgsRef = collection(db, \"messages\", id, \"chat\");\n  const q = query(msgsRef, orderBy(\"createdAt\", \"asc\"));\n  useEffect(() => {\n    const usersRef = collection(db, \"users\");\n    const q = query(usersRef, where(\"uid\", \"not-in\", [user1]));\n    const unsub = onSnapshot(q, querySnapshot => {\n      let users = [];\n      querySnapshot.forEach(doc => {\n        users.push(doc.data());\n      });\n      setUsers(users);\n    });\n    return () => unsub();\n  }, []); // useEffect(() => {\n  //   for (var i = 0; i < msgsRef._path.segments.length; i++) {\n  //     if (msgsRef._path.segments[i] === user1) {\n  //       console.log(3);\n  //       console.log(\"ITEM DATA :: \" + msgsRef._path.segments[i]);\n  //     } else {\n  //       console.log(2);\n  //     }\n  //   }\n  // }, []);\n\n  const selectUser = async user => {\n    setChat(user);\n    const msgsRef = collection(db, \"messages\", id, \"chat\");\n    const q = query(msgsRef, orderBy(\"createdAt\", \"asc\"));\n    onSnapshot(q, querySnapshot => {\n      let msgs = [];\n      querySnapshot.forEach(doc => {\n        msgs.push(doc.data());\n      });\n      setMsgs(msgs);\n    }); // get last message b/w logged in user and selected user\n\n    const docSnap = await getDoc(doc(db, \"lastMsg\", id)); // if last message exists and message is from selected user\n\n    if (docSnap.data() && docSnap.data().from !== user1) {\n      // update last message doc, set unread to false\n      await updateDoc(doc(db, \"lastMsg\", id), {\n        unread: false\n      });\n    }\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!text) {\n      return false;\n    }\n\n    let url;\n\n    if (img) {\n      const imgRef = ref(storage, `images/${new Date().getTime()} - ${img.name}`);\n      const snap = uploadBytes(imgRef, img);\n      const dlUrl = await getDownloadURL(ref(storage, snap.ref.fullPath));\n      url = dlUrl;\n    }\n\n    addDoc(collection(db, \"messages\", id, \"chat\"), {\n      text,\n      from: user1,\n      to: user2,\n      createdAt: Timestamp.fromDate(new Date()),\n      media: url || \"\",\n      recevierName: clientId.name,\n      recevierGmail: clientId.email\n    });\n    setDoc(doc(db, \"lastMsg\", id), {\n      text,\n      from: user1,\n      to: user2,\n      createdAt: Timestamp.fromDate(new Date()),\n      media: url || \"\",\n      unread: true,\n      recevierName: clientId.name,\n      recevierGmail: clientId.email\n    });\n    setText(\"\");\n    setImg(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"users_container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-page-border\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: \"switch-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"switch-label\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"switch-handle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Desktop Notification\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), users.map(user => /*#__PURE__*/_jsxDEV(User, {\n        user: user,\n        selectUser: selectUser,\n        user1: user1,\n        chat: chat\n      }, user.uid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages_container\",\n      children: chat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-model-size-img\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/static/media/image1.f02b66c0.jpg\",\n            alt: \"img\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-model-size-status\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: chat.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"1 min\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: msgs.length ? msgs.map((msg, i) => /*#__PURE__*/_jsxDEV(Message, {\n            msg: msg,\n            user1: user1,\n            text: text\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 21\n          }, this)) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MessageForm, {\n          handleSubmit: handleSubmit,\n          text: text,\n          setText: setText,\n          setImg: setImg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"no_conv\",\n        children: \"Select a user to start conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"EI6vydb5qYesP2uRUERqzpssspU=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/ewt-all-in-one-1/Desktop/Chat-app/src/pages/Home.js"],"names":["React","useEffect","useState","db","auth","storage","collection","query","where","onSnapshot","addDoc","Timestamp","orderBy","setDoc","doc","getDoc","updateDoc","ref","getDownloadURL","uploadBytes","User","MessageForm","Message","Home","users","setUsers","chat","setChat","text","setText","img","setImg","msgs","setMsgs","user1","currentUser","uid","clientId","JSON","parse","localStorage","getItem","user2","id","msgsRef","q","usersRef","unsub","querySnapshot","forEach","push","data","selectUser","user","docSnap","from","unread","handleSubmit","e","preventDefault","url","imgRef","Date","getTime","name","snap","dlUrl","fullPath","to","createdAt","fromDate","media","recevierName","recevierGmail","email","map","length","msg","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { db, auth, storage } from \"../firebase\";\r\nimport {\r\n  collection,\r\n  query,\r\n  where,\r\n  onSnapshot,\r\n  addDoc,\r\n  Timestamp,\r\n  orderBy,\r\n  setDoc,\r\n  doc,\r\n  getDoc,\r\n  updateDoc,\r\n} from \"firebase/firestore\";\r\nimport { ref, getDownloadURL, uploadBytes } from \"firebase/storage\";\r\nimport User from \"../components/User\";\r\nimport MessageForm from \"../components/MessageForm\";\r\nimport Message from \"../components/Message\";\r\n\r\nconst Home = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [chat, setChat] = useState(\"\");\r\n  const [text, setText] = useState(\"\");\r\n  const [img, setImg] = useState(\"\");\r\n  const [msgs, setMsgs] = useState([]);\r\n\r\n  const user1 = auth.currentUser.uid;\r\n\r\n  const clientId = JSON.parse(localStorage.getItem(\"id\"));\r\n\r\n  const user2 = clientId.id;\r\n  const id = user1 > user2 ? `${user1 + user2}` : `${user2 + user1}`;\r\n\r\n  const msgsRef = collection(db, \"messages\", id, \"chat\");\r\n  const q = query(msgsRef, orderBy(\"createdAt\", \"asc\"));\r\n\r\n  useEffect(() => {\r\n    const usersRef = collection(db, \"users\");\r\n    const q = query(usersRef, where(\"uid\", \"not-in\", [user1]));\r\n    const unsub = onSnapshot(q, (querySnapshot) => {\r\n      let users = [];\r\n      querySnapshot.forEach((doc) => {\r\n        users.push(doc.data());\r\n      });\r\n      setUsers(users);\r\n    });\r\n    return () => unsub();\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   for (var i = 0; i < msgsRef._path.segments.length; i++) {\r\n  //     if (msgsRef._path.segments[i] === user1) {\r\n  //       console.log(3);\r\n  //       console.log(\"ITEM DATA :: \" + msgsRef._path.segments[i]);\r\n  //     } else {\r\n  //       console.log(2);\r\n  //     }\r\n  //   }\r\n  // }, []);\r\n\r\n  const selectUser = async (user) => {\r\n    setChat(user);\r\n\r\n    const msgsRef = collection(db, \"messages\", id, \"chat\");\r\n    const q = query(msgsRef, orderBy(\"createdAt\", \"asc\"));\r\n\r\n    onSnapshot(q, (querySnapshot) => {\r\n      let msgs = [];\r\n      querySnapshot.forEach((doc) => {\r\n        msgs.push(doc.data());\r\n      });\r\n      setMsgs(msgs);\r\n    });\r\n\r\n    // get last message b/w logged in user and selected user\r\n    const docSnap = await getDoc(doc(db, \"lastMsg\", id));\r\n    // if last message exists and message is from selected user\r\n    if (docSnap.data() && docSnap.data().from !== user1) {\r\n      // update last message doc, set unread to false\r\n      await updateDoc(doc(db, \"lastMsg\", id), { unread: false });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!text) {\r\n      return false;\r\n    }\r\n    let url;\r\n    if (img) {\r\n      const imgRef = ref(\r\n        storage,\r\n        `images/${new Date().getTime()} - ${img.name}`\r\n      );\r\n      const snap = uploadBytes(imgRef, img);\r\n      const dlUrl = await getDownloadURL(ref(storage, snap.ref.fullPath));\r\n      url = dlUrl;\r\n    }\r\n\r\n    addDoc(collection(db, \"messages\", id, \"chat\"), {\r\n      text,\r\n      from: user1,\r\n      to: user2,\r\n      createdAt: Timestamp.fromDate(new Date()),\r\n      media: url || \"\",\r\n      recevierName: clientId.name,\r\n      recevierGmail: clientId.email,\r\n    });\r\n\r\n    setDoc(doc(db, \"lastMsg\", id), {\r\n      text,\r\n      from: user1,\r\n      to: user2,\r\n      createdAt: Timestamp.fromDate(new Date()),\r\n      media: url || \"\",\r\n      unread: true,\r\n      recevierName: clientId.name,\r\n      recevierGmail: clientId.email,\r\n    });\r\n    setText(\"\");\r\n    setImg(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"home_container\">\r\n      <div className=\"users_container\">\r\n        <div className=\"chat-page-border\">\r\n          <label className=\"switch\">\r\n            <input type=\"checkbox\" className=\"switch-input\" />\r\n            <span className=\"switch-label\"></span>\r\n            <span className=\"switch-handle\"></span>\r\n          </label>\r\n          <p>Desktop Notification</p>\r\n        </div>\r\n        {users.map((user) => (\r\n          <User\r\n            key={user.uid}\r\n            user={user}\r\n            selectUser={selectUser}\r\n            user1={user1}\r\n            chat={chat}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"messages_container\">\r\n        {chat ? (\r\n          <>\r\n            <div className=\"chat-model-size-img\">\r\n              <img src=\"/static/media/image1.f02b66c0.jpg\" alt=\"img\" />\r\n\r\n              {\r\n                <div className=\"chat-model-size-status\">\r\n                  <p>{chat.name}</p>\r\n                  <span>1 min</span>\r\n                </div>\r\n              }\r\n            </div>\r\n            <div className=\"messages\">\r\n              {msgs.length\r\n                ? msgs.map((msg, i) => (\r\n                    <Message key={i} msg={msg} user1={user1} text={text} />\r\n                  ))\r\n                : null}\r\n            </div>\r\n            <MessageForm\r\n              handleSubmit={handleSubmit}\r\n              text={text}\r\n              setText={setText}\r\n              setImg={setImg}\r\n            />\r\n          </>\r\n        ) : (\r\n          <h3 className=\"no_conv\">Select a user to start conversation</h3>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}